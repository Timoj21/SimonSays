
SimonSays.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000071e  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f30  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a69  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071b  00000000  00000000  00002271  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  0000298c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d8  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000034cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b5 d0       	rcall	.+362    	; 0x22e <main>
  c4:	2a c3       	rjmp	.+1620   	; 0x71a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_sequence>:
	}
}

// Get a new random sequence
void get_sequence(char* sequence)
{
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	7c 01       	movw	r14, r24
	for(int i = 0; i < level; i++)
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	0f c0       	rjmp	.+30     	; 0xfa <get_sequence+0x32>
	{
		sequence[i] = rand() % 4;
  dc:	87 01       	movw	r16, r14
  de:	0c 0f       	add	r16, r28
  e0:	1d 1f       	adc	r17, r29
  e2:	b0 d2       	rcall	.+1376   	; 0x644 <rand>
  e4:	83 70       	andi	r24, 0x03	; 3
  e6:	90 78       	andi	r25, 0x80	; 128
  e8:	99 23       	and	r25, r25
  ea:	24 f4       	brge	.+8      	; 0xf4 <get_sequence+0x2c>
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	8c 6f       	ori	r24, 0xFC	; 252
  f0:	9f 6f       	ori	r25, 0xFF	; 255
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	f8 01       	movw	r30, r16
  f6:	80 83       	st	Z, r24
}

// Get a new random sequence
void get_sequence(char* sequence)
{
	for(int i = 0; i < level; i++)
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <level>
  fe:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <level+0x1>
 102:	c8 17       	cp	r28, r24
 104:	d9 07       	cpc	r29, r25
 106:	54 f3       	brlt	.-44     	; 0xdc <get_sequence+0x14>
	{
		sequence[i] = rand() % 4;
	}
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	08 95       	ret

00000116 <show_sequence>:

// Show the sequence on the leds
void show_sequence(char* sequence)
{
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	8c 01       	movw	r16, r24
	setLedColor(0, 255, 0);
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	6f ef       	ldi	r22, 0xFF	; 255
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	f1 d0       	rcall	.+482    	; 0x30a <setLedColor>
	for(int i = 0; i < level; i++)
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	08 c0       	rjmp	.+16     	; 0x13e <show_sequence+0x28>
	{
		blinkLed(sequence[i], 500);
 12e:	f8 01       	movw	r30, r16
 130:	ec 0f       	add	r30, r28
 132:	fd 1f       	adc	r31, r29
 134:	64 ef       	ldi	r22, 0xF4	; 244
 136:	71 e0       	ldi	r23, 0x01	; 1
 138:	80 81       	ld	r24, Z
 13a:	f3 d0       	rcall	.+486    	; 0x322 <blinkLed>

// Show the sequence on the leds
void show_sequence(char* sequence)
{
	setLedColor(0, 255, 0);
	for(int i = 0; i < level; i++)
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <level>
 142:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <level+0x1>
 146:	c8 17       	cp	r28, r24
 148:	d9 07       	cpc	r29, r25
 14a:	8c f3       	brlt	.-30     	; 0x12e <show_sequence+0x18>
	{
		blinkLed(sequence[i], 500);
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <wait_for_sequence>:

// Wait for the user to press the buttons to get a sequence
void wait_for_sequence(char* answer)
{
 156:	fc 01       	movw	r30, r24
	int presses = 0;			//Amount of presses the user has pressed
	int previousButton = 0;		//Int to remember the previous pressed button
	bool released = true;		//Bool to check if the previous button is released
 158:	91 e0       	ldi	r25, 0x01	; 1

// Wait for the user to press the buttons to get a sequence
void wait_for_sequence(char* answer)
{
	int presses = 0;			//Amount of presses the user has pressed
	int previousButton = 0;		//Int to remember the previous pressed button
 15a:	60 e0       	ldi	r22, 0x00	; 0
}

// Wait for the user to press the buttons to get a sequence
void wait_for_sequence(char* answer)
{
	int presses = 0;			//Amount of presses the user has pressed
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
	int previousButton = 0;		//Int to remember the previous pressed button
	bool released = true;		//Bool to check if the previous button is released
	
	while(presses < level)
 160:	40 c0       	rjmp	.+128    	; 0x1e2 <wait_for_sequence+0x8c>
	{
		if(PINA & (1<<4) && released)
 162:	cc 9b       	sbis	0x19, 4	; 25
 164:	0b c0       	rjmp	.+22     	; 0x17c <wait_for_sequence+0x26>
 166:	99 23       	and	r25, r25
 168:	49 f0       	breq	.+18     	; 0x17c <wait_for_sequence+0x26>
		{
			answer[presses] = 0;
 16a:	df 01       	movw	r26, r30
 16c:	a4 0f       	add	r26, r20
 16e:	b5 1f       	adc	r27, r21
 170:	1c 92       	st	X, r1
			presses++;
 172:	4f 5f       	subi	r20, 0xFF	; 255
 174:	5f 4f       	sbci	r21, 0xFF	; 255
			released = false;
 176:	90 e0       	ldi	r25, 0x00	; 0
			previousButton = 4;
 178:	64 e0       	ldi	r22, 0x04	; 4
 17a:	29 c0       	rjmp	.+82     	; 0x1ce <wait_for_sequence+0x78>
		} else if(PINA & (1<<5) && released)
 17c:	cd 9b       	sbis	0x19, 5	; 25
 17e:	0c c0       	rjmp	.+24     	; 0x198 <wait_for_sequence+0x42>
 180:	99 23       	and	r25, r25
 182:	51 f0       	breq	.+20     	; 0x198 <wait_for_sequence+0x42>
		{
			answer[presses] = 1;
 184:	df 01       	movw	r26, r30
 186:	a4 0f       	add	r26, r20
 188:	b5 1f       	adc	r27, r21
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	8c 93       	st	X, r24
			presses++;
 18e:	4f 5f       	subi	r20, 0xFF	; 255
 190:	5f 4f       	sbci	r21, 0xFF	; 255
			released = false;
 192:	90 e0       	ldi	r25, 0x00	; 0
			previousButton = 5;
 194:	65 e0       	ldi	r22, 0x05	; 5
 196:	1b c0       	rjmp	.+54     	; 0x1ce <wait_for_sequence+0x78>
		} else if(PINA & (1<<6) && released)
 198:	ce 9b       	sbis	0x19, 6	; 25
 19a:	0c c0       	rjmp	.+24     	; 0x1b4 <wait_for_sequence+0x5e>
 19c:	99 23       	and	r25, r25
 19e:	51 f0       	breq	.+20     	; 0x1b4 <wait_for_sequence+0x5e>
		{
			answer[presses] = 2;
 1a0:	df 01       	movw	r26, r30
 1a2:	a4 0f       	add	r26, r20
 1a4:	b5 1f       	adc	r27, r21
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	8c 93       	st	X, r24
			presses++;
 1aa:	4f 5f       	subi	r20, 0xFF	; 255
 1ac:	5f 4f       	sbci	r21, 0xFF	; 255
			released = false;
 1ae:	90 e0       	ldi	r25, 0x00	; 0
			previousButton = 6;
 1b0:	66 e0       	ldi	r22, 0x06	; 6
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <wait_for_sequence+0x78>
		} else if(PINA & (1<<7) && released)
 1b4:	cf 9b       	sbis	0x19, 7	; 25
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <wait_for_sequence+0x78>
 1b8:	99 23       	and	r25, r25
 1ba:	49 f0       	breq	.+18     	; 0x1ce <wait_for_sequence+0x78>
		{
			answer[presses] = 3;
 1bc:	df 01       	movw	r26, r30
 1be:	a4 0f       	add	r26, r20
 1c0:	b5 1f       	adc	r27, r21
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	8c 93       	st	X, r24
			presses++;
 1c6:	4f 5f       	subi	r20, 0xFF	; 255
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
			released = false;
 1ca:	90 e0       	ldi	r25, 0x00	; 0
			previousButton = 7;
 1cc:	67 e0       	ldi	r22, 0x07	; 7
		}
		
		if(!(PINA & (1<<previousButton)))
 1ce:	29 b3       	in	r18, 0x19	; 25
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	06 2e       	mov	r0, r22
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <wait_for_sequence+0x84>
 1d6:	35 95       	asr	r19
 1d8:	27 95       	ror	r18
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <wait_for_sequence+0x80>
 1de:	20 ff       	sbrs	r18, 0
		{
			released = true;
 1e0:	91 e0       	ldi	r25, 0x01	; 1
{
	int presses = 0;			//Amount of presses the user has pressed
	int previousButton = 0;		//Int to remember the previous pressed button
	bool released = true;		//Bool to check if the previous button is released
	
	while(presses < level)
 1e2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <level>
 1e6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <level+0x1>
 1ea:	42 17       	cp	r20, r18
 1ec:	53 07       	cpc	r21, r19
 1ee:	0c f4       	brge	.+2      	; 0x1f2 <wait_for_sequence+0x9c>
 1f0:	b8 cf       	rjmp	.-144    	; 0x162 <wait_for_sequence+0xc>
		if(!(PINA & (1<<previousButton)))
		{
			released = true;
		}
	}
}
 1f2:	08 95       	ret

000001f4 <check_sequence>:

// Check if the user's sequence is correct
int check_sequence(char *sequence, char *answer)
{
 1f4:	dc 01       	movw	r26, r24
	for(int i = 0; i < level; i++)
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <check_sequence+0x20>
	{
		if(sequence[i] != answer[i])
 1fc:	fd 01       	movw	r30, r26
 1fe:	e2 0f       	add	r30, r18
 200:	f3 1f       	adc	r31, r19
 202:	40 81       	ld	r20, Z
 204:	fb 01       	movw	r30, r22
 206:	e2 0f       	add	r30, r18
 208:	f3 1f       	adc	r31, r19
 20a:	90 81       	ld	r25, Z
 20c:	49 13       	cpse	r20, r25
 20e:	0c c0       	rjmp	.+24     	; 0x228 <check_sequence+0x34>
}

// Check if the user's sequence is correct
int check_sequence(char *sequence, char *answer)
{
	for(int i = 0; i < level; i++)
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <level>
 218:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <level+0x1>
 21c:	24 17       	cp	r18, r20
 21e:	35 07       	cpc	r19, r21
 220:	6c f3       	brlt	.-38     	; 0x1fc <check_sequence+0x8>
		if(sequence[i] != answer[i])
		{
			return 0;
		}
	}
	return 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	08 95       	ret
{
	for(int i = 0; i < level; i++)
	{
		if(sequence[i] != answer[i])
		{
			return 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 22c:	08 95       	ret

0000022e <main>:


int main(void)
{
	rgbLedInit();
 22e:	5b d0       	rcall	.+182    	; 0x2e6 <rgbLedInit>
	
	char *sequence = malloc(maxLevel);
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	9f d0       	rcall	.+318    	; 0x374 <malloc>
 236:	ec 01       	movw	r28, r24
	char *answer = malloc(maxLevel);
 238:	8a e0       	ldi	r24, 0x0A	; 10
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9b d0       	rcall	.+310    	; 0x374 <malloc>
 23e:	8c 01       	movw	r16, r24
	
	
	// Show green leds
	setLedColor(0, 0, 255);
 240:	4f ef       	ldi	r20, 0xFF	; 255
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
	blinkAllLed(2000);
 246:	61 d0       	rcall	.+194    	; 0x30a <setLedColor>
 248:	80 ed       	ldi	r24, 0xD0	; 208
	
    while (1) 
    {
		get_sequence(sequence);
 24a:	97 e0       	ldi	r25, 0x07	; 7
 24c:	87 d0       	rcall	.+270    	; 0x35c <blinkAllLed>
		show_sequence(sequence);
 24e:	ce 01       	movw	r24, r28
 250:	3b df       	rcall	.-394    	; 0xc8 <get_sequence>
		wait_for_sequence(answer);
 252:	ce 01       	movw	r24, r28
 254:	60 df       	rcall	.-320    	; 0x116 <show_sequence>
 256:	c8 01       	movw	r24, r16
	
		if(check_sequence(sequence,answer))
 258:	7e df       	rcall	.-260    	; 0x156 <wait_for_sequence>
 25a:	b8 01       	movw	r22, r16
 25c:	ce 01       	movw	r24, r28
 25e:	ca df       	rcall	.-108    	; 0x1f4 <check_sequence>
 260:	89 2b       	or	r24, r25
 262:	21 f1       	breq	.+72     	; 0x2ac <main+0x7e>
		{
			//Show green leds to tell the answer was correct
			level++;
 264:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <level>
 268:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <level+0x1>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <level+0x1>
			setLedColor(0, 0, 255);
 272:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <level>
 276:	4f ef       	ldi	r20, 0xFF	; 255
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
			blinkAllLed(2000);
 27c:	46 d0       	rcall	.+140    	; 0x30a <setLedColor>
 27e:	80 ed       	ldi	r24, 0xD0	; 208
 280:	97 e0       	ldi	r25, 0x07	; 7
			if(level > maxLevel)
 282:	6c d0       	rcall	.+216    	; 0x35c <blinkAllLed>
 284:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <level>
 288:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <level+0x1>
			{
				//Show white leds to tell the game is finished
				setLedColor(100, 100, 100);
 28c:	0b 97       	sbiw	r24, 0x0b	; 11
 28e:	fc f2       	brlt	.-66     	; 0x24e <main+0x20>
 290:	44 e6       	ldi	r20, 0x64	; 100
 292:	64 e6       	ldi	r22, 0x64	; 100
 294:	84 e6       	ldi	r24, 0x64	; 100
				blinkAllLed(2000);
 296:	39 d0       	rcall	.+114    	; 0x30a <setLedColor>
 298:	80 ed       	ldi	r24, 0xD0	; 208
 29a:	97 e0       	ldi	r25, 0x07	; 7
 29c:	5f d0       	rcall	.+190    	; 0x35c <blinkAllLed>
				level = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <level+0x1>
 2a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <level>
			}
		} else
		{
			//Show red leds to tell the answer was not correct
			level = 1;
 2aa:	d1 cf       	rjmp	.-94     	; 0x24e <main+0x20>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <level+0x1>
 2b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <level>
			setLedColor(255, 0, 0);
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	25 d0       	rcall	.+74     	; 0x30a <setLedColor>
			blinkAllLed(2000);
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	4b d0       	rcall	.+150    	; 0x35c <blinkAllLed>
 2c6:	c3 cf       	rjmp	.-122    	; 0x24e <main+0x20>

000002c8 <rgbWait>:
 2c8:	20 e0       	ldi	r18, 0x00	; 0
}

// Set all the leds off
void setAllLedOff (void)
{
	PORTA = 0x0F;
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <rgbWait+0x16>
 2ce:	ef ec       	ldi	r30, 0xCF	; 207
 2d0:	f7 e0       	ldi	r31, 0x07	; 7
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <rgbWait+0xa>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <rgbWait+0x10>
 2d8:	00 00       	nop
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	28 17       	cp	r18, r24
 2e0:	39 07       	cpc	r19, r25
 2e2:	ac f3       	brlt	.-22     	; 0x2ce <rgbWait+0x6>
 2e4:	08 95       	ret

000002e6 <rgbLedInit>:
 2e6:	1b bc       	out	0x2b, r1	; 43
 2e8:	1a bc       	out	0x2a, r1	; 42
 2ea:	19 bc       	out	0x29, r1	; 41
 2ec:	18 bc       	out	0x28, r1	; 40
 2ee:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2f2:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2f6:	89 ea       	ldi	r24, 0xA9	; 169
 2f8:	8f bd       	out	0x2f, r24	; 47
 2fa:	8b e0       	ldi	r24, 0x0B	; 11
 2fc:	8e bd       	out	0x2e, r24	; 46
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	87 bb       	out	0x17, r24	; 23
 302:	8f e0       	ldi	r24, 0x0F	; 15
 304:	8a bb       	out	0x1a, r24	; 26
 306:	8b bb       	out	0x1b, r24	; 27
 308:	08 95       	ret

0000030a <setLedColor>:
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	9b bd       	out	0x2b, r25	; 43
 30e:	8a bd       	out	0x2a, r24	; 42
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	79 bd       	out	0x29, r23	; 41
 314:	68 bd       	out	0x28, r22	; 40
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 31c:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 320:	08 95       	ret

00000322 <blinkLed>:
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	8b 01       	movw	r16, r22
 32c:	9b b3       	in	r25, 0x1b	; 27
 32e:	c1 e0       	ldi	r28, 0x01	; 1
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <blinkLed+0x16>
 334:	cc 0f       	add	r28, r28
 336:	dd 1f       	adc	r29, r29
 338:	8a 95       	dec	r24
 33a:	e2 f7       	brpl	.-8      	; 0x334 <blinkLed+0x12>
 33c:	8c 2f       	mov	r24, r28
 33e:	80 95       	com	r24
 340:	98 23       	and	r25, r24
 342:	9b bb       	out	0x1b, r25	; 27
 344:	cb 01       	movw	r24, r22
 346:	c0 df       	rcall	.-128    	; 0x2c8 <rgbWait>
 348:	8b b3       	in	r24, 0x1b	; 27
 34a:	c8 2b       	or	r28, r24
 34c:	cb bb       	out	0x1b, r28	; 27
 34e:	c8 01       	movw	r24, r16
 350:	bb df       	rcall	.-138    	; 0x2c8 <rgbWait>
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <blinkAllLed>:
}

// Blink all leds for a specific time
void blinkAllLed(int time)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
	PORTA = 0x00;
 362:	1b ba       	out	0x1b, r1	; 27
	rgbWait(time);
 364:	b1 df       	rcall	.-158    	; 0x2c8 <rgbWait>
	PORTA = 0x0F;
 366:	8f e0       	ldi	r24, 0x0F	; 15
 368:	8b bb       	out	0x1b, r24	; 27
	rgbWait(time);
 36a:	ce 01       	movw	r24, r28
 36c:	ad df       	rcall	.-166    	; 0x2c8 <rgbWait>
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <malloc>:
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	91 05       	cpc	r25, r1
 380:	10 f4       	brcc	.+4      	; 0x386 <malloc+0x12>
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 38a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	a0 e0       	ldi	r26, 0x00	; 0
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	30 97       	sbiw	r30, 0x00	; 0
 398:	19 f1       	breq	.+70     	; 0x3e0 <malloc+0x6c>
 39a:	40 81       	ld	r20, Z
 39c:	51 81       	ldd	r21, Z+1	; 0x01
 39e:	02 81       	ldd	r16, Z+2	; 0x02
 3a0:	13 81       	ldd	r17, Z+3	; 0x03
 3a2:	48 17       	cp	r20, r24
 3a4:	59 07       	cpc	r21, r25
 3a6:	c8 f0       	brcs	.+50     	; 0x3da <malloc+0x66>
 3a8:	84 17       	cp	r24, r20
 3aa:	95 07       	cpc	r25, r21
 3ac:	69 f4       	brne	.+26     	; 0x3c8 <malloc+0x54>
 3ae:	10 97       	sbiw	r26, 0x00	; 0
 3b0:	31 f0       	breq	.+12     	; 0x3be <malloc+0x4a>
 3b2:	12 96       	adiw	r26, 0x02	; 2
 3b4:	0c 93       	st	X, r16
 3b6:	12 97       	sbiw	r26, 0x02	; 2
 3b8:	13 96       	adiw	r26, 0x03	; 3
 3ba:	1c 93       	st	X, r17
 3bc:	27 c0       	rjmp	.+78     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3be:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 3c2:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 3c6:	22 c0       	rjmp	.+68     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3c8:	21 15       	cp	r18, r1
 3ca:	31 05       	cpc	r19, r1
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <malloc+0x60>
 3ce:	42 17       	cp	r20, r18
 3d0:	53 07       	cpc	r21, r19
 3d2:	18 f4       	brcc	.+6      	; 0x3da <malloc+0x66>
 3d4:	9a 01       	movw	r18, r20
 3d6:	bd 01       	movw	r22, r26
 3d8:	ef 01       	movw	r28, r30
 3da:	df 01       	movw	r26, r30
 3dc:	f8 01       	movw	r30, r16
 3de:	db cf       	rjmp	.-74     	; 0x396 <malloc+0x22>
 3e0:	21 15       	cp	r18, r1
 3e2:	31 05       	cpc	r19, r1
 3e4:	f9 f0       	breq	.+62     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3e6:	28 1b       	sub	r18, r24
 3e8:	39 0b       	sbc	r19, r25
 3ea:	24 30       	cpi	r18, 0x04	; 4
 3ec:	31 05       	cpc	r19, r1
 3ee:	80 f4       	brcc	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	9b 81       	ldd	r25, Y+3	; 0x03
 3f4:	61 15       	cp	r22, r1
 3f6:	71 05       	cpc	r23, r1
 3f8:	21 f0       	breq	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	fb 01       	movw	r30, r22
 3fc:	93 83       	std	Z+3, r25	; 0x03
 3fe:	82 83       	std	Z+2, r24	; 0x02
 400:	04 c0       	rjmp	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 402:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 406:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 40a:	fe 01       	movw	r30, r28
 40c:	32 96       	adiw	r30, 0x02	; 2
 40e:	44 c0       	rjmp	.+136    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 410:	fe 01       	movw	r30, r28
 412:	e2 0f       	add	r30, r18
 414:	f3 1f       	adc	r31, r19
 416:	81 93       	st	Z+, r24
 418:	91 93       	st	Z+, r25
 41a:	22 50       	subi	r18, 0x02	; 2
 41c:	31 09       	sbc	r19, r1
 41e:	39 83       	std	Y+1, r19	; 0x01
 420:	28 83       	st	Y, r18
 422:	3a c0       	rjmp	.+116    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 424:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 428:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 42c:	23 2b       	or	r18, r19
 42e:	41 f4       	brne	.+16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 430:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 434:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 438:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 43c:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
 440:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 444:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 448:	21 15       	cp	r18, r1
 44a:	31 05       	cpc	r19, r1
 44c:	41 f4       	brne	.+16     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 44e:	2d b7       	in	r18, 0x3d	; 61
 450:	3e b7       	in	r19, 0x3e	; 62
 452:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 456:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 45a:	24 1b       	sub	r18, r20
 45c:	35 0b       	sbc	r19, r21
 45e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 462:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__data_end+0x1>
 466:	e2 17       	cp	r30, r18
 468:	f3 07       	cpc	r31, r19
 46a:	a0 f4       	brcc	.+40     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 46c:	2e 1b       	sub	r18, r30
 46e:	3f 0b       	sbc	r19, r31
 470:	28 17       	cp	r18, r24
 472:	39 07       	cpc	r19, r25
 474:	78 f0       	brcs	.+30     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 476:	ac 01       	movw	r20, r24
 478:	4e 5f       	subi	r20, 0xFE	; 254
 47a:	5f 4f       	sbci	r21, 0xFF	; 255
 47c:	24 17       	cp	r18, r20
 47e:	35 07       	cpc	r19, r21
 480:	48 f0       	brcs	.+18     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 482:	4e 0f       	add	r20, r30
 484:	5f 1f       	adc	r21, r31
 486:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__data_end+0x1>
 48a:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__data_end>
 48e:	81 93       	st	Z+, r24
 490:	91 93       	st	Z+, r25
 492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 494:	e0 e0       	ldi	r30, 0x00	; 0
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	cf 01       	movw	r24, r30
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <free>:
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	09 f4       	brne	.+2      	; 0x4ae <free+0xa>
 4ac:	81 c0       	rjmp	.+258    	; 0x5b0 <free+0x10c>
 4ae:	fc 01       	movw	r30, r24
 4b0:	32 97       	sbiw	r30, 0x02	; 2
 4b2:	13 82       	std	Z+3, r1	; 0x03
 4b4:	12 82       	std	Z+2, r1	; 0x02
 4b6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 4ba:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 4be:	10 97       	sbiw	r26, 0x00	; 0
 4c0:	81 f4       	brne	.+32     	; 0x4e2 <free+0x3e>
 4c2:	20 81       	ld	r18, Z
 4c4:	31 81       	ldd	r19, Z+1	; 0x01
 4c6:	82 0f       	add	r24, r18
 4c8:	93 1f       	adc	r25, r19
 4ca:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 4ce:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 4d2:	28 17       	cp	r18, r24
 4d4:	39 07       	cpc	r19, r25
 4d6:	51 f5       	brne	.+84     	; 0x52c <free+0x88>
 4d8:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__data_end+0x1>
 4dc:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__data_end>
 4e0:	67 c0       	rjmp	.+206    	; 0x5b0 <free+0x10c>
 4e2:	ed 01       	movw	r28, r26
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	ce 17       	cp	r28, r30
 4ea:	df 07       	cpc	r29, r31
 4ec:	40 f4       	brcc	.+16     	; 0x4fe <free+0x5a>
 4ee:	4a 81       	ldd	r20, Y+2	; 0x02
 4f0:	5b 81       	ldd	r21, Y+3	; 0x03
 4f2:	9e 01       	movw	r18, r28
 4f4:	41 15       	cp	r20, r1
 4f6:	51 05       	cpc	r21, r1
 4f8:	f1 f0       	breq	.+60     	; 0x536 <free+0x92>
 4fa:	ea 01       	movw	r28, r20
 4fc:	f5 cf       	rjmp	.-22     	; 0x4e8 <free+0x44>
 4fe:	d3 83       	std	Z+3, r29	; 0x03
 500:	c2 83       	std	Z+2, r28	; 0x02
 502:	40 81       	ld	r20, Z
 504:	51 81       	ldd	r21, Z+1	; 0x01
 506:	84 0f       	add	r24, r20
 508:	95 1f       	adc	r25, r21
 50a:	c8 17       	cp	r28, r24
 50c:	d9 07       	cpc	r29, r25
 50e:	59 f4       	brne	.+22     	; 0x526 <free+0x82>
 510:	88 81       	ld	r24, Y
 512:	99 81       	ldd	r25, Y+1	; 0x01
 514:	84 0f       	add	r24, r20
 516:	95 1f       	adc	r25, r21
 518:	02 96       	adiw	r24, 0x02	; 2
 51a:	91 83       	std	Z+1, r25	; 0x01
 51c:	80 83       	st	Z, r24
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	9b 81       	ldd	r25, Y+3	; 0x03
 522:	93 83       	std	Z+3, r25	; 0x03
 524:	82 83       	std	Z+2, r24	; 0x02
 526:	21 15       	cp	r18, r1
 528:	31 05       	cpc	r19, r1
 52a:	29 f4       	brne	.+10     	; 0x536 <free+0x92>
 52c:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 530:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 534:	3d c0       	rjmp	.+122    	; 0x5b0 <free+0x10c>
 536:	e9 01       	movw	r28, r18
 538:	fb 83       	std	Y+3, r31	; 0x03
 53a:	ea 83       	std	Y+2, r30	; 0x02
 53c:	49 91       	ld	r20, Y+
 53e:	59 91       	ld	r21, Y+
 540:	c4 0f       	add	r28, r20
 542:	d5 1f       	adc	r29, r21
 544:	ec 17       	cp	r30, r28
 546:	fd 07       	cpc	r31, r29
 548:	61 f4       	brne	.+24     	; 0x562 <free+0xbe>
 54a:	80 81       	ld	r24, Z
 54c:	91 81       	ldd	r25, Z+1	; 0x01
 54e:	84 0f       	add	r24, r20
 550:	95 1f       	adc	r25, r21
 552:	02 96       	adiw	r24, 0x02	; 2
 554:	e9 01       	movw	r28, r18
 556:	99 83       	std	Y+1, r25	; 0x01
 558:	88 83       	st	Y, r24
 55a:	82 81       	ldd	r24, Z+2	; 0x02
 55c:	93 81       	ldd	r25, Z+3	; 0x03
 55e:	9b 83       	std	Y+3, r25	; 0x03
 560:	8a 83       	std	Y+2, r24	; 0x02
 562:	e0 e0       	ldi	r30, 0x00	; 0
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	12 96       	adiw	r26, 0x02	; 2
 568:	8d 91       	ld	r24, X+
 56a:	9c 91       	ld	r25, X
 56c:	13 97       	sbiw	r26, 0x03	; 3
 56e:	00 97       	sbiw	r24, 0x00	; 0
 570:	19 f0       	breq	.+6      	; 0x578 <free+0xd4>
 572:	fd 01       	movw	r30, r26
 574:	dc 01       	movw	r26, r24
 576:	f7 cf       	rjmp	.-18     	; 0x566 <free+0xc2>
 578:	8d 91       	ld	r24, X+
 57a:	9c 91       	ld	r25, X
 57c:	11 97       	sbiw	r26, 0x01	; 1
 57e:	9d 01       	movw	r18, r26
 580:	2e 5f       	subi	r18, 0xFE	; 254
 582:	3f 4f       	sbci	r19, 0xFF	; 255
 584:	82 0f       	add	r24, r18
 586:	93 1f       	adc	r25, r19
 588:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 58c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 590:	28 17       	cp	r18, r24
 592:	39 07       	cpc	r19, r25
 594:	69 f4       	brne	.+26     	; 0x5b0 <free+0x10c>
 596:	30 97       	sbiw	r30, 0x00	; 0
 598:	29 f4       	brne	.+10     	; 0x5a4 <free+0x100>
 59a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 59e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <free+0x104>
 5a4:	13 82       	std	Z+3, r1	; 0x03
 5a6:	12 82       	std	Z+2, r1	; 0x02
 5a8:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x1>
 5ac:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end>
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <do_rand>:
 5b6:	8f 92       	push	r8
 5b8:	9f 92       	push	r9
 5ba:	af 92       	push	r10
 5bc:	bf 92       	push	r11
 5be:	cf 92       	push	r12
 5c0:	df 92       	push	r13
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	ec 01       	movw	r28, r24
 5cc:	68 81       	ld	r22, Y
 5ce:	79 81       	ldd	r23, Y+1	; 0x01
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	9b 81       	ldd	r25, Y+3	; 0x03
 5d4:	61 15       	cp	r22, r1
 5d6:	71 05       	cpc	r23, r1
 5d8:	81 05       	cpc	r24, r1
 5da:	91 05       	cpc	r25, r1
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <do_rand+0x30>
 5de:	64 e2       	ldi	r22, 0x24	; 36
 5e0:	79 ed       	ldi	r23, 0xD9	; 217
 5e2:	8b e5       	ldi	r24, 0x5B	; 91
 5e4:	97 e0       	ldi	r25, 0x07	; 7
 5e6:	2d e1       	ldi	r18, 0x1D	; 29
 5e8:	33 ef       	ldi	r19, 0xF3	; 243
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	38 d0       	rcall	.+112    	; 0x660 <__divmodsi4>
 5f0:	49 01       	movw	r8, r18
 5f2:	5a 01       	movw	r10, r20
 5f4:	9b 01       	movw	r18, r22
 5f6:	ac 01       	movw	r20, r24
 5f8:	a7 ea       	ldi	r26, 0xA7	; 167
 5fa:	b1 e4       	ldi	r27, 0x41	; 65
 5fc:	4d d0       	rcall	.+154    	; 0x698 <__muluhisi3>
 5fe:	6b 01       	movw	r12, r22
 600:	7c 01       	movw	r14, r24
 602:	ac ee       	ldi	r26, 0xEC	; 236
 604:	b4 ef       	ldi	r27, 0xF4	; 244
 606:	a5 01       	movw	r20, r10
 608:	94 01       	movw	r18, r8
 60a:	52 d0       	rcall	.+164    	; 0x6b0 <__mulohisi3>
 60c:	dc 01       	movw	r26, r24
 60e:	cb 01       	movw	r24, r22
 610:	8c 0d       	add	r24, r12
 612:	9d 1d       	adc	r25, r13
 614:	ae 1d       	adc	r26, r14
 616:	bf 1d       	adc	r27, r15
 618:	b7 ff       	sbrs	r27, 7
 61a:	03 c0       	rjmp	.+6      	; 0x622 <do_rand+0x6c>
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	a1 09       	sbc	r26, r1
 620:	b0 48       	sbci	r27, 0x80	; 128
 622:	88 83       	st	Y, r24
 624:	99 83       	std	Y+1, r25	; 0x01
 626:	aa 83       	std	Y+2, r26	; 0x02
 628:	bb 83       	std	Y+3, r27	; 0x03
 62a:	9f 77       	andi	r25, 0x7F	; 127
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	df 90       	pop	r13
 636:	cf 90       	pop	r12
 638:	bf 90       	pop	r11
 63a:	af 90       	pop	r10
 63c:	9f 90       	pop	r9
 63e:	8f 90       	pop	r8
 640:	08 95       	ret

00000642 <rand_r>:
 642:	b9 cf       	rjmp	.-142    	; 0x5b6 <do_rand>

00000644 <rand>:
 644:	86 e0       	ldi	r24, 0x06	; 6
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	b6 cf       	rjmp	.-148    	; 0x5b6 <do_rand>

0000064a <srand>:
 64a:	a0 e0       	ldi	r26, 0x00	; 0
 64c:	b0 e0       	ldi	r27, 0x00	; 0
 64e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
 652:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
 656:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
 65a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
 65e:	08 95       	ret

00000660 <__divmodsi4>:
 660:	05 2e       	mov	r0, r21
 662:	97 fb       	bst	r25, 7
 664:	16 f4       	brtc	.+4      	; 0x66a <__divmodsi4+0xa>
 666:	00 94       	com	r0
 668:	0f d0       	rcall	.+30     	; 0x688 <__negsi2>
 66a:	57 fd       	sbrc	r21, 7
 66c:	05 d0       	rcall	.+10     	; 0x678 <__divmodsi4_neg2>
 66e:	24 d0       	rcall	.+72     	; 0x6b8 <__udivmodsi4>
 670:	07 fc       	sbrc	r0, 7
 672:	02 d0       	rcall	.+4      	; 0x678 <__divmodsi4_neg2>
 674:	46 f4       	brtc	.+16     	; 0x686 <__divmodsi4_exit>
 676:	08 c0       	rjmp	.+16     	; 0x688 <__negsi2>

00000678 <__divmodsi4_neg2>:
 678:	50 95       	com	r21
 67a:	40 95       	com	r20
 67c:	30 95       	com	r19
 67e:	21 95       	neg	r18
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	4f 4f       	sbci	r20, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255

00000686 <__divmodsi4_exit>:
 686:	08 95       	ret

00000688 <__negsi2>:
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__muluhisi3>:
 698:	31 d0       	rcall	.+98     	; 0x6fc <__umulhisi3>
 69a:	a5 9f       	mul	r26, r21
 69c:	90 0d       	add	r25, r0
 69e:	b4 9f       	mul	r27, r20
 6a0:	90 0d       	add	r25, r0
 6a2:	a4 9f       	mul	r26, r20
 6a4:	80 0d       	add	r24, r0
 6a6:	91 1d       	adc	r25, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	08 95       	ret

000006ac <__mulshisi3>:
 6ac:	b7 ff       	sbrs	r27, 7
 6ae:	f4 cf       	rjmp	.-24     	; 0x698 <__muluhisi3>

000006b0 <__mulohisi3>:
 6b0:	f3 df       	rcall	.-26     	; 0x698 <__muluhisi3>
 6b2:	82 1b       	sub	r24, r18
 6b4:	93 0b       	sbc	r25, r19
 6b6:	08 95       	ret

000006b8 <__udivmodsi4>:
 6b8:	a1 e2       	ldi	r26, 0x21	; 33
 6ba:	1a 2e       	mov	r1, r26
 6bc:	aa 1b       	sub	r26, r26
 6be:	bb 1b       	sub	r27, r27
 6c0:	fd 01       	movw	r30, r26
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <__udivmodsi4_ep>

000006c4 <__udivmodsi4_loop>:
 6c4:	aa 1f       	adc	r26, r26
 6c6:	bb 1f       	adc	r27, r27
 6c8:	ee 1f       	adc	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	a2 17       	cp	r26, r18
 6ce:	b3 07       	cpc	r27, r19
 6d0:	e4 07       	cpc	r30, r20
 6d2:	f5 07       	cpc	r31, r21
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__udivmodsi4_ep>
 6d6:	a2 1b       	sub	r26, r18
 6d8:	b3 0b       	sbc	r27, r19
 6da:	e4 0b       	sbc	r30, r20
 6dc:	f5 0b       	sbc	r31, r21

000006de <__udivmodsi4_ep>:
 6de:	66 1f       	adc	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	1a 94       	dec	r1
 6e8:	69 f7       	brne	.-38     	; 0x6c4 <__udivmodsi4_loop>
 6ea:	60 95       	com	r22
 6ec:	70 95       	com	r23
 6ee:	80 95       	com	r24
 6f0:	90 95       	com	r25
 6f2:	9b 01       	movw	r18, r22
 6f4:	ac 01       	movw	r20, r24
 6f6:	bd 01       	movw	r22, r26
 6f8:	cf 01       	movw	r24, r30
 6fa:	08 95       	ret

000006fc <__umulhisi3>:
 6fc:	a2 9f       	mul	r26, r18
 6fe:	b0 01       	movw	r22, r0
 700:	b3 9f       	mul	r27, r19
 702:	c0 01       	movw	r24, r0
 704:	a3 9f       	mul	r26, r19
 706:	70 0d       	add	r23, r0
 708:	81 1d       	adc	r24, r1
 70a:	11 24       	eor	r1, r1
 70c:	91 1d       	adc	r25, r1
 70e:	b2 9f       	mul	r27, r18
 710:	70 0d       	add	r23, r0
 712:	81 1d       	adc	r24, r1
 714:	11 24       	eor	r1, r1
 716:	91 1d       	adc	r25, r1
 718:	08 95       	ret

0000071a <_exit>:
 71a:	f8 94       	cli

0000071c <__stop_program>:
 71c:	ff cf       	rjmp	.-2      	; 0x71c <__stop_program>
